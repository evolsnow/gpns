// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	HelloRequest
	HelloReply
	PushRequest
	PushReply
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// The request message containing the user's name.
type HelloRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Age  int32  `protobuf:"varint,2,opt,name=age" json:"age,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// The response message containing the greetings
type HelloReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Age     int32  `protobuf:"varint,2,opt,name=age" json:"age,omitempty"`
}

func (m *HelloReply) Reset()                    { *m = HelloReply{} }
func (m *HelloReply) String() string            { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()               {}
func (*HelloReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// Push request, containing push message and repeated device token
type PushRequest struct {
	Message     string            `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	DeviceToken []string          `protobuf:"bytes,2,rep,name=deviceToken" json:"deviceToken,omitempty"`
	ExtraInfo   map[string]string `protobuf:"bytes,3,rep,name=extraInfo" json:"extraInfo,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PushRequest) Reset()                    { *m = PushRequest{} }
func (m *PushRequest) String() string            { return proto.CompactTextString(m) }
func (*PushRequest) ProtoMessage()               {}
func (*PushRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PushRequest) GetExtraInfo() map[string]string {
	if m != nil {
		return m.ExtraInfo
	}
	return nil
}

// Push response, containing numbers of successful push and failed token list
type PushReply struct {
	Count       int32    `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	DeviceToken []string `protobuf:"bytes,2,rep,name=deviceToken" json:"deviceToken,omitempty"`
}

func (m *PushReply) Reset()                    { *m = PushReply{} }
func (m *PushReply) String() string            { return proto.CompactTextString(m) }
func (*PushReply) ProtoMessage()               {}
func (*PushReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*HelloRequest)(nil), "protos.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "protos.HelloReply")
	proto.RegisterType((*PushRequest)(nil), "protos.PushRequest")
	proto.RegisterType((*PushReply)(nil), "protos.PushReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for GPNS service

type GPNSClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// Apple Push
	ApplePush(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushReply, error)
}

type gPNSClient struct {
	cc *grpc.ClientConn
}

func NewGPNSClient(cc *grpc.ClientConn) GPNSClient {
	return &gPNSClient{cc}
}

func (c *gPNSClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := grpc.Invoke(ctx, "/protos.GPNS/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPNSClient) ApplePush(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushReply, error) {
	out := new(PushReply)
	err := grpc.Invoke(ctx, "/protos.GPNS/ApplePush", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GPNS service

type GPNSServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	// Apple Push
	ApplePush(context.Context, *PushRequest) (*PushReply, error)
}

func RegisterGPNSServer(s *grpc.Server, srv GPNSServer) {
	s.RegisterService(&_GPNS_serviceDesc, srv)
}

func _GPNS_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GPNSServer).SayHello(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GPNS_ApplePush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GPNSServer).ApplePush(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _GPNS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.GPNS",
	HandlerType: (*GPNSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _GPNS_SayHello_Handler,
		},
		{
			MethodName: "ApplePush",
			Handler:    _GPNS_ApplePush_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x51, 0xcb, 0x4e, 0xc3, 0x40,
	0x0c, 0x24, 0x4d, 0x03, 0xac, 0x83, 0x10, 0x98, 0x1e, 0xa2, 0x9c, 0xaa, 0x9c, 0x38, 0xe5, 0x50,
	0x1e, 0xaa, 0x10, 0x07, 0x10, 0xaa, 0x80, 0x0b, 0xaa, 0xb6, 0xfc, 0x40, 0x08, 0xe6, 0xa1, 0xa6,
	0xd9, 0x90, 0x4d, 0x2a, 0xf2, 0x89, 0xfc, 0x15, 0xfb, 0x68, 0x44, 0x8a, 0x8a, 0x38, 0xad, 0x3d,
	0xf6, 0xec, 0x78, 0x6c, 0x60, 0x65, 0x91, 0xc6, 0x45, 0x29, 0x2a, 0x81, 0xdb, 0xe6, 0x91, 0xd1,
	0x29, 0xec, 0xdd, 0x51, 0x96, 0x09, 0x4e, 0x1f, 0x35, 0xc9, 0x0a, 0x11, 0xfa, 0x79, 0xb2, 0xa0,
	0xc0, 0x19, 0x3a, 0xc7, 0x8c, 0x9b, 0x18, 0x0f, 0xc0, 0x4d, 0x5e, 0x29, 0xe8, 0x29, 0xc8, 0xe3,
	0x3a, 0x8c, 0xc6, 0x00, 0x2b, 0x56, 0x91, 0x35, 0x18, 0xc0, 0xce, 0x82, 0xa4, 0xd4, 0x3d, 0x96,
	0xd6, 0xa6, 0x1b, 0x98, 0x5f, 0x0e, 0xf8, 0xd3, 0x5a, 0xbe, 0xb5, 0x7a, 0x7f, 0x73, 0x87, 0xe0,
	0x3f, 0xd3, 0xf2, 0x3d, 0xa5, 0x47, 0x31, 0xa7, 0x5c, 0xfd, 0xe1, 0xaa, 0x6a, 0x17, 0xc2, 0x2b,
	0x60, 0xf4, 0x59, 0x95, 0xc9, 0x7d, 0xfe, 0x22, 0x02, 0x57, 0xd5, 0xfd, 0x51, 0x64, 0xed, 0xc9,
	0xb8, 0xa3, 0x11, 0x4f, 0xda, 0xa6, 0x49, 0x5e, 0x95, 0x0d, 0xff, 0x21, 0x85, 0x97, 0xb0, 0xbf,
	0x5e, 0xd4, 0x13, 0xcf, 0xa9, 0x59, 0xcd, 0xa2, 0x43, 0x1c, 0x80, 0xb7, 0x4c, 0xb2, 0xda, 0xba,
	0x60, 0xdc, 0x26, 0x17, 0xbd, 0xb1, 0x13, 0xdd, 0x00, 0xb3, 0x32, 0x7a, 0x09, 0xaa, 0x2d, 0x15,
	0x75, 0x5e, 0x19, 0xaa, 0xc7, 0x6d, 0xf2, 0xbf, 0x89, 0x51, 0x0d, 0xfd, 0xdb, 0xe9, 0xc3, 0x0c,
	0xcf, 0x61, 0x77, 0x96, 0x34, 0x66, 0xab, 0x38, 0x68, 0x5d, 0x74, 0x4f, 0x13, 0xe2, 0x2f, 0x54,
	0xa9, 0x46, 0x5b, 0x78, 0x06, 0xec, 0xba, 0x28, 0x32, 0xd2, 0x93, 0xe0, 0xd1, 0x06, 0xfb, 0xe1,
	0xe1, 0x3a, 0x68, 0x68, 0x4f, 0xf6, 0xfe, 0x27, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xcb, 0xcc,
	0x51, 0x89, 0x13, 0x02, 0x00, 0x00,
}
