// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	HelloRequest
	HelloReply
	ApplePushRequest
	ApplePushReply
	SocketPushRequest
	SocketPushReply
	MailRequest
	MailResponse
	SMSRequest
	SMSResponse
	ReceiveChatRequest
	ReceiveChatReply
	Empty
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// The request message containing the user's name.
type HelloRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Age  int32  `protobuf:"varint,2,opt,name=age" json:"age,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// The response message containing the greetings
type HelloReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Age     int32  `protobuf:"varint,2,opt,name=age" json:"age,omitempty"`
}

func (m *HelloReply) Reset()                    { *m = HelloReply{} }
func (m *HelloReply) String() string            { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()               {}
func (*HelloReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// Apple push request, containing push message and repeated device token
type ApplePushRequest struct {
	Message     string            `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Time        int64             `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	ExtraInfo   map[string]string `protobuf:"bytes,3,rep,name=extraInfo" json:"extraInfo,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DeviceToken []string          `protobuf:"bytes,4,rep,name=deviceToken" json:"deviceToken,omitempty"`
}

func (m *ApplePushRequest) Reset()                    { *m = ApplePushRequest{} }
func (m *ApplePushRequest) String() string            { return proto.CompactTextString(m) }
func (*ApplePushRequest) ProtoMessage()               {}
func (*ApplePushRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ApplePushRequest) GetExtraInfo() map[string]string {
	if m != nil {
		return m.ExtraInfo
	}
	return nil
}

// Apple push response, containing numbers of successful push and failed device list
type ApplePushReply struct {
	DeviceToken []string `protobuf:"bytes,2,rep,name=deviceToken" json:"deviceToken,omitempty"`
}

func (m *ApplePushReply) Reset()                    { *m = ApplePushReply{} }
func (m *ApplePushReply) String() string            { return proto.CompactTextString(m) }
func (*ApplePushReply) ProtoMessage()               {}
func (*ApplePushReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// webSocket push
type SocketPushRequest struct {
	Message   string            `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Time      int64             `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	ExtraInfo map[string]string `protobuf:"bytes,3,rep,name=extraInfo" json:"extraInfo,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	UserToken []string          `protobuf:"bytes,4,rep,name=userToken" json:"userToken,omitempty"`
}

func (m *SocketPushRequest) Reset()                    { *m = SocketPushRequest{} }
func (m *SocketPushRequest) String() string            { return proto.CompactTextString(m) }
func (*SocketPushRequest) ProtoMessage()               {}
func (*SocketPushRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SocketPushRequest) GetExtraInfo() map[string]string {
	if m != nil {
		return m.ExtraInfo
	}
	return nil
}

// webSocket failed user token
type SocketPushReply struct {
	UserToken []string `protobuf:"bytes,1,rep,name=userToken" json:"userToken,omitempty"`
}

func (m *SocketPushReply) Reset()                    { *m = SocketPushReply{} }
func (m *SocketPushReply) String() string            { return proto.CompactTextString(m) }
func (*SocketPushReply) ProtoMessage()               {}
func (*SocketPushReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// Send mail request
type MailRequest struct {
	To      string `protobuf:"bytes,1,opt,name=to" json:"to,omitempty"`
	Subject string `protobuf:"bytes,2,opt,name=subject" json:"subject,omitempty"`
	Body    string `protobuf:"bytes,3,opt,name=body" json:"body,omitempty"`
}

func (m *MailRequest) Reset()                    { *m = MailRequest{} }
func (m *MailRequest) String() string            { return proto.CompactTextString(m) }
func (*MailRequest) ProtoMessage()               {}
func (*MailRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// Send mail response{
type MailResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *MailResponse) Reset()                    { *m = MailResponse{} }
func (m *MailResponse) String() string            { return proto.CompactTextString(m) }
func (*MailResponse) ProtoMessage()               {}
func (*MailResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

// Send sms request
type SMSRequest struct {
	To   string `protobuf:"bytes,1,opt,name=to" json:"to,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
}

func (m *SMSRequest) Reset()                    { *m = SMSRequest{} }
func (m *SMSRequest) String() string            { return proto.CompactTextString(m) }
func (*SMSRequest) ProtoMessage()               {}
func (*SMSRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

// Send sms response{
type SMSResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
}

func (m *SMSResponse) Reset()                    { *m = SMSResponse{} }
func (m *SMSResponse) String() string            { return proto.CompactTextString(m) }
func (*SMSResponse) ProtoMessage()               {}
func (*SMSResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

// chat msg request
type ReceiveChatRequest struct {
}

func (m *ReceiveChatRequest) Reset()                    { *m = ReceiveChatRequest{} }
func (m *ReceiveChatRequest) String() string            { return proto.CompactTextString(m) }
func (*ReceiveChatRequest) ProtoMessage()               {}
func (*ReceiveChatRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

// chat msg reply
type ReceiveChatReply struct {
	Chat string `protobuf:"bytes,1,opt,name=chat" json:"chat,omitempty"`
}

func (m *ReceiveChatReply) Reset()                    { *m = ReceiveChatReply{} }
func (m *ReceiveChatReply) String() string            { return proto.CompactTextString(m) }
func (*ReceiveChatReply) ProtoMessage()               {}
func (*ReceiveChatReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

// nil
type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func init() {
	proto.RegisterType((*HelloRequest)(nil), "protos.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "protos.HelloReply")
	proto.RegisterType((*ApplePushRequest)(nil), "protos.ApplePushRequest")
	proto.RegisterType((*ApplePushReply)(nil), "protos.ApplePushReply")
	proto.RegisterType((*SocketPushRequest)(nil), "protos.SocketPushRequest")
	proto.RegisterType((*SocketPushReply)(nil), "protos.SocketPushReply")
	proto.RegisterType((*MailRequest)(nil), "protos.MailRequest")
	proto.RegisterType((*MailResponse)(nil), "protos.MailResponse")
	proto.RegisterType((*SMSRequest)(nil), "protos.SMSRequest")
	proto.RegisterType((*SMSResponse)(nil), "protos.SMSResponse")
	proto.RegisterType((*ReceiveChatRequest)(nil), "protos.ReceiveChatRequest")
	proto.RegisterType((*ReceiveChatReply)(nil), "protos.ReceiveChatReply")
	proto.RegisterType((*Empty)(nil), "protos.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for GPNS service

type GPNSClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// Apple Push
	ApplePush(ctx context.Context, in *ApplePushRequest, opts ...grpc.CallOption) (*ApplePushReply, error)
	// WebSocket Push
	SocketPush(ctx context.Context, in *SocketPushRequest, opts ...grpc.CallOption) (*SocketPushReply, error)
	// Mail send
	SendMail(ctx context.Context, in *MailRequest, opts ...grpc.CallOption) (*MailResponse, error)
	// Send SMS
	SendSMS(ctx context.Context, in *SMSRequest, opts ...grpc.CallOption) (*SMSResponse, error)
	// Receive msg from client and deliver to backend
	ReceiveMsg(ctx context.Context, in *ReceiveChatRequest, opts ...grpc.CallOption) (GPNS_ReceiveMsgClient, error)
}

type gPNSClient struct {
	cc *grpc.ClientConn
}

func NewGPNSClient(cc *grpc.ClientConn) GPNSClient {
	return &gPNSClient{cc}
}

func (c *gPNSClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := grpc.Invoke(ctx, "/protos.GPNS/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPNSClient) ApplePush(ctx context.Context, in *ApplePushRequest, opts ...grpc.CallOption) (*ApplePushReply, error) {
	out := new(ApplePushReply)
	err := grpc.Invoke(ctx, "/protos.GPNS/ApplePush", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPNSClient) SocketPush(ctx context.Context, in *SocketPushRequest, opts ...grpc.CallOption) (*SocketPushReply, error) {
	out := new(SocketPushReply)
	err := grpc.Invoke(ctx, "/protos.GPNS/SocketPush", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPNSClient) SendMail(ctx context.Context, in *MailRequest, opts ...grpc.CallOption) (*MailResponse, error) {
	out := new(MailResponse)
	err := grpc.Invoke(ctx, "/protos.GPNS/SendMail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPNSClient) SendSMS(ctx context.Context, in *SMSRequest, opts ...grpc.CallOption) (*SMSResponse, error) {
	out := new(SMSResponse)
	err := grpc.Invoke(ctx, "/protos.GPNS/SendSMS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPNSClient) ReceiveMsg(ctx context.Context, in *ReceiveChatRequest, opts ...grpc.CallOption) (GPNS_ReceiveMsgClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GPNS_serviceDesc.Streams[0], c.cc, "/protos.GPNS/ReceiveMsg", opts...)
	if err != nil {
		return nil, err
	}
	x := &gPNSReceiveMsgClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GPNS_ReceiveMsgClient interface {
	Recv() (*ReceiveChatReply, error)
	grpc.ClientStream
}

type gPNSReceiveMsgClient struct {
	grpc.ClientStream
}

func (x *gPNSReceiveMsgClient) Recv() (*ReceiveChatReply, error) {
	m := new(ReceiveChatReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GPNS service

type GPNSServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	// Apple Push
	ApplePush(context.Context, *ApplePushRequest) (*ApplePushReply, error)
	// WebSocket Push
	SocketPush(context.Context, *SocketPushRequest) (*SocketPushReply, error)
	// Mail send
	SendMail(context.Context, *MailRequest) (*MailResponse, error)
	// Send SMS
	SendSMS(context.Context, *SMSRequest) (*SMSResponse, error)
	// Receive msg from client and deliver to backend
	ReceiveMsg(*ReceiveChatRequest, GPNS_ReceiveMsgServer) error
}

func RegisterGPNSServer(s *grpc.Server, srv GPNSServer) {
	s.RegisterService(&_GPNS_serviceDesc, srv)
}

func _GPNS_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPNSServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.GPNS/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPNSServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPNS_ApplePush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplePushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPNSServer).ApplePush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.GPNS/ApplePush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPNSServer).ApplePush(ctx, req.(*ApplePushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPNS_SocketPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SocketPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPNSServer).SocketPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.GPNS/SocketPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPNSServer).SocketPush(ctx, req.(*SocketPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPNS_SendMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPNSServer).SendMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.GPNS/SendMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPNSServer).SendMail(ctx, req.(*MailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPNS_SendSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPNSServer).SendSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.GPNS/SendSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPNSServer).SendSMS(ctx, req.(*SMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPNS_ReceiveMsg_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReceiveChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GPNSServer).ReceiveMsg(m, &gPNSReceiveMsgServer{stream})
}

type GPNS_ReceiveMsgServer interface {
	Send(*ReceiveChatReply) error
	grpc.ServerStream
}

type gPNSReceiveMsgServer struct {
	grpc.ServerStream
}

func (x *gPNSReceiveMsgServer) Send(m *ReceiveChatReply) error {
	return x.ServerStream.SendMsg(m)
}

var _GPNS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.GPNS",
	HandlerType: (*GPNSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _GPNS_SayHello_Handler,
		},
		{
			MethodName: "ApplePush",
			Handler:    _GPNS_ApplePush_Handler,
		},
		{
			MethodName: "SocketPush",
			Handler:    _GPNS_SocketPush_Handler,
		},
		{
			MethodName: "SendMail",
			Handler:    _GPNS_SendMail_Handler,
		},
		{
			MethodName: "SendSMS",
			Handler:    _GPNS_SendSMS_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveMsg",
			Handler:       _GPNS_ReceiveMsg_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 555 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x54, 0xdd, 0x6e, 0xd3, 0x4c,
	0x10, 0xfd, 0x9c, 0x9f, 0xa6, 0x9e, 0x54, 0xf9, 0xc2, 0x36, 0x2a, 0xc6, 0xe2, 0x22, 0xda, 0x0b,
	0xc8, 0x55, 0xa8, 0x42, 0x05, 0x15, 0x42, 0xaa, 0x00, 0xa5, 0x80, 0x50, 0x50, 0xe5, 0xf0, 0x02,
	0x8e, 0x33, 0xb4, 0x21, 0x8e, 0xd7, 0x78, 0x37, 0x11, 0x7e, 0x60, 0xc4, 0x3b, 0x70, 0xc5, 0xae,
	0xd7, 0x9b, 0xd8, 0xf9, 0x01, 0x09, 0xae, 0x32, 0x33, 0xde, 0x73, 0xce, 0xec, 0x99, 0xd9, 0x80,
	0x9d, 0xc4, 0x41, 0x3f, 0x4e, 0x98, 0x60, 0xe4, 0x28, 0xfb, 0xe1, 0xf4, 0x02, 0x4e, 0xde, 0x61,
	0x18, 0x32, 0x0f, 0xbf, 0x2e, 0x91, 0x0b, 0x42, 0xa0, 0x16, 0xf9, 0x0b, 0x74, 0xac, 0xae, 0xd5,
	0xb3, 0xbd, 0x2c, 0x26, 0x6d, 0xa8, 0xfa, 0xb7, 0xe8, 0x54, 0x64, 0xa9, 0xee, 0xa9, 0x90, 0x5e,
	0x02, 0xe4, 0xa8, 0x38, 0x4c, 0x89, 0x03, 0x8d, 0x05, 0x72, 0xae, 0xce, 0x68, 0x98, 0x49, 0xf7,
	0x20, 0x7f, 0x58, 0xd0, 0x7e, 0x15, 0xc7, 0x21, 0xde, 0x2c, 0xf9, 0x9d, 0x11, 0x3d, 0x4c, 0x20,
	0xdb, 0x11, 0xb3, 0x85, 0x66, 0xa8, 0x7a, 0x59, 0x4c, 0x86, 0x60, 0xe3, 0x37, 0x91, 0xf8, 0xef,
	0xa3, 0xcf, 0xcc, 0xa9, 0x76, 0xab, 0xbd, 0xe6, 0xe0, 0xb1, 0xbe, 0x15, 0xef, 0x6f, 0x53, 0xf7,
	0x87, 0xe6, 0xe4, 0x30, 0x12, 0x49, 0xea, 0x6d, 0x90, 0xa4, 0x0b, 0xcd, 0x29, 0xae, 0x66, 0x01,
	0x7e, 0x62, 0x73, 0x8c, 0x9c, 0x9a, 0x24, 0xb2, 0xbd, 0x62, 0xc9, 0x7d, 0x09, 0xad, 0x32, 0x5c,
	0xdd, 0x67, 0x8e, 0x69, 0xde, 0xa4, 0x0a, 0x49, 0x07, 0xea, 0x2b, 0x3f, 0x5c, 0xea, 0x0e, 0x6d,
	0x4f, 0x27, 0x2f, 0x2a, 0x97, 0x16, 0x1d, 0x40, 0xab, 0xd0, 0x8d, 0xf2, 0x69, 0x4b, 0xb1, 0xb2,
	0xa3, 0x48, 0xbf, 0x5b, 0x70, 0x6f, 0xcc, 0x82, 0x39, 0x8a, 0xbf, 0xb7, 0xe7, 0x7a, 0xd7, 0x9e,
	0x9e, 0xb1, 0x67, 0x87, 0xfb, 0x37, 0xfe, 0x3c, 0x04, 0x7b, 0xc9, 0x31, 0x29, 0xba, 0xb3, 0x29,
	0xfc, 0xa3, 0x37, 0x4f, 0xe0, 0xff, 0x62, 0x2b, 0xca, 0x9c, 0x92, 0x9c, 0xb5, 0x25, 0x47, 0x3f,
	0x40, 0x73, 0xe4, 0xcf, 0x42, 0xe3, 0x48, 0x0b, 0x2a, 0x82, 0xe5, 0x52, 0x32, 0x52, 0x0e, 0xf1,
	0xe5, 0xe4, 0x0b, 0x06, 0x22, 0xd7, 0x32, 0xa9, 0x72, 0x68, 0xc2, 0xa6, 0xa9, 0x34, 0x22, 0xdb,
	0x67, 0x15, 0xd3, 0x1e, 0x9c, 0x68, 0x32, 0x1e, 0xb3, 0x88, 0xa3, 0x46, 0x07, 0x81, 0xf4, 0x34,
	0xa3, 0x3c, 0xf6, 0x4c, 0x4a, 0xcf, 0x01, 0xc6, 0xa3, 0xf1, 0x21, 0x55, 0xe5, 0xbe, 0xf4, 0x2b,
	0x97, 0xcc, 0x62, 0x7a, 0x05, 0xcd, 0x0c, 0xf1, 0x27, 0x6a, 0x72, 0x06, 0x47, 0x09, 0xfa, 0x9c,
	0x45, 0x39, 0x3c, 0xcf, 0x68, 0x07, 0x88, 0x87, 0x01, 0xce, 0x56, 0xf8, 0xe6, 0xce, 0x17, 0xb9,
	0x34, 0x7d, 0x04, 0xed, 0x52, 0x55, 0x39, 0x26, 0xe5, 0x03, 0x99, 0x98, 0xa7, 0xaa, 0x62, 0xda,
	0x80, 0xfa, 0x70, 0x11, 0x8b, 0x74, 0xf0, 0xb3, 0x02, 0xb5, 0xb7, 0x37, 0x1f, 0xc7, 0xe4, 0x19,
	0x1c, 0x8f, 0xfd, 0x34, 0x7b, 0xad, 0xa4, 0x63, 0xf6, 0xa0, 0xf8, 0xe4, 0x5d, 0xb2, 0x55, 0x95,
	0xdc, 0xf4, 0x3f, 0x72, 0x05, 0xf6, 0x7a, 0x7d, 0x89, 0x73, 0xe8, 0x7d, 0xb9, 0x67, 0x7b, 0xbe,
	0x68, 0x82, 0xd7, 0xd2, 0xbb, 0xf5, 0x8c, 0xc9, 0x83, 0x83, 0x2b, 0xe8, 0xde, 0xdf, 0xf7, 0x49,
	0x73, 0x3c, 0x97, 0xcd, 0x63, 0x34, 0x55, 0xd3, 0x22, 0xa7, 0xe6, 0x58, 0x61, 0x11, 0xdc, 0x4e,
	0xb9, 0xa8, 0x5d, 0x97, 0xc0, 0x0b, 0x68, 0x28, 0xa0, 0x1c, 0x05, 0x59, 0x5f, 0x6f, 0x33, 0x49,
	0xf7, 0xb4, 0x54, 0x5b, 0xa3, 0xae, 0x01, 0x72, 0x97, 0x47, 0xfc, 0x96, 0xb8, 0xe6, 0xd0, 0xee,
	0x3c, 0x5c, 0x67, 0xef, 0xb7, 0xac, 0xe9, 0x73, 0x6b, 0xa2, 0xff, 0x5c, 0x9f, 0xfe, 0x0a, 0x00,
	0x00, 0xff, 0xff, 0x61, 0xa8, 0x4a, 0xb8, 0x70, 0x05, 0x00, 0x00,
}
