//  protoc rpc.proto --go_out=plugins=grpc:.

syntax = "proto3";

package protos;

// The greeting service definition.
service GPNS {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {}

  // Apple Push
  rpc ApplePush (ApplePushRequest) returns (ApplePushReply) {}

  // WebSocket Push
  rpc SocketPush (SocketPushRequest) returns (SocketPushReply) {}

  // Mail send
  rpc SendMail (MailRequest) returns (MailResponse) {}

  // Send SMS
  rpc SendSMS (SMSRequest) returns (SMSResponse) {}

  // Receive msg from client and deliver to backend
  rpc ReceiveMsg (ReceiveChatRequest) returns (stream ReceiveChatReply) {}
}

// The request message containing the user's name.
message HelloRequest {
    string name = 1;
    int32 age = 2;
}

// The response message containing the greetings
message HelloReply {
    string message = 1;
    int32 age = 2;
}

// Apple push request, containing push message and repeated device token
message ApplePushRequest {
    string message = 1;
    repeated string deviceToken = 2;
    map<string, string> extraInfo = 3;
}

// Apple push response, containing numbers of successful push and failed device list
message ApplePushReply {
    repeated string deviceToken = 2;
}

// webSocket push
message SocketPushRequest {
    string message = 1;
    repeated string userToken = 2;
    map<string, string> extraInfo = 3;
}

// webSocket failed user token
message SocketPushReply {
    repeated string userToken = 1;
}

// Send mail request
message MailRequest {
    string to = 1;
    string subject = 2;
    string body = 3;
}

// Send mail response{
message MailResponse {
    bool success = 1;
}

// Send sms request
message SMSRequest {
    string to = 1;
    string text = 2;
}

// Send sms response{
message SMSResponse {
    bool success = 1;
    string reason = 2;
}

// chat msg request
message ReceiveChatRequest {
}

// chat msg reply
message ReceiveChatReply {
    string chat = 1;
}

// nil
message Empty {}